Notes for Deloitte 

Why are you here, what do you want to learn?

New since Java 8:
9 - modules, private methods in interfaces
10 - var
11 - var in lambdas
14 - switch expressions, arrow form
15 - text blocks
16 - records, patterns in instanceof, local enums, local interfaces
17 - sealed types, strict floating point
18 - java doc snippets
21 - record patterns, patterns in switch
22 - unnamed variables
23 - Markdown comments

Questions of design?
- Construction idioms
- design for change, idioms that support this
- Variable behavior idioms
- Functional programming style
- Stream API
- Questions of concurrency/threading

Machine for labs;
Option 1 (best) -- Your own machine with your own config, with Java 17, provided you can share the screen with me to get help/feedback during lab.
Option 2 (entirely adequate) -- Virtual machine we provide
Option 3 (not really satisfactory, but better than nothing) your own machine that you cannot share the screen with us.

My git repo should be "read-only". Write your own code in a project and repo of your own. If you edit mine, it'll simply give you merge conflicts when I update it!

Initial assignment:
- "represent" a student, with name, average grade (gpa), taking several courses (courses are only the textual name)
- print a list of all students
- print a list of "smart" students
- assume that this is the beginning of a long-term, business critical, series of applications (all data in memory)
- enough sample data to demonstrate but don't get carried away (e.g. three students is [barely] sufficient)

Assignment day 2. Choose among
- whatever you feel like practicing
- allow variable length argument list for initializing a student, e.g.
  new Student("Inaya", 2.7, "Math", "Physics");
  new Student("Ayo", 3.5, "Algebra");
  from a single constructor
- make Student fully immutable, take care of:
  -- mutable method arguments passed from the caller
  -- mutable fields returned to the caller
- make the student "always correct"
  -- define semantics of "correct" and implement in a method
  -- enforce those semantics at construction and any mutator methods
 - test out assertions? maybe from the command line
 - play with var
 - patterns in instanceof -- try to use this to implement an equals method

Assignment day 3
Goal, we want to be able to create lists of *modified* students.
For example, if a student takes more than 2 courses, we increase their
gpa by 0.2. Or if a student takes Quantum Mechanics, we append
"superstar" to their name
- function that processes a list of students, and creates a new list of
  students, but provides a means of creating a modified / derived student
  object from the original
- interface that describes "take this student, give me a derived student"
- two implementations of that interface, for the two outlined behaviors
  above (one at a time!)
- add "withXxx" methods (two for the proposal, one at a time) to allow
  creation of a modified student from a starting student

Assignment 1 day 4
- In students7
- "generify" the StudentUser interface
- "generify" the doToAll method, so it uses the generic version of the
  StudentUser interface
- make sure the code still works
